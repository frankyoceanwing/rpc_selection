// Code generated by protoc-gen-go.
// source: arith.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	arith.proto

It has these top-level messages:
	Args
	Reply
	Quotient
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Args struct {
	A int32 `protobuf:"varint,1,opt,name=A" json:"A,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=B" json:"B,omitempty"`
}

func (m *Args) Reset()                    { *m = Args{} }
func (m *Args) String() string            { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()               {}
func (*Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Args) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *Args) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Reply struct {
	R int32 `protobuf:"varint,1,opt,name=R" json:"R,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

type Quotient struct {
	Quo int32 `protobuf:"varint,1,opt,name=Quo" json:"Quo,omitempty"`
	Rem int32 `protobuf:"varint,2,opt,name=Rem" json:"Rem,omitempty"`
}

func (m *Quotient) Reset()                    { *m = Quotient{} }
func (m *Quotient) String() string            { return proto.CompactTextString(m) }
func (*Quotient) ProtoMessage()               {}
func (*Quotient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Quotient) GetQuo() int32 {
	if m != nil {
		return m.Quo
	}
	return 0
}

func (m *Quotient) GetRem() int32 {
	if m != nil {
		return m.Rem
	}
	return 0
}

func init() {
	proto.RegisterType((*Args)(nil), "pb.Args")
	proto.RegisterType((*Reply)(nil), "pb.Reply")
	proto.RegisterType((*Quotient)(nil), "pb.Quotient")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Arith service

type ArithClient interface {
	// Sends a greeting
	Multiply(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
	Divide(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Quotient, error)
}

type arithClient struct {
	cc *grpc.ClientConn
}

func NewArithClient(cc *grpc.ClientConn) ArithClient {
	return &arithClient{cc}
}

func (c *arithClient) Multiply(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/pb.Arith/Multiply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithClient) Divide(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Quotient, error) {
	out := new(Quotient)
	err := grpc.Invoke(ctx, "/pb.Arith/Divide", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Arith service

type ArithServer interface {
	// Sends a greeting
	Multiply(context.Context, *Args) (*Reply, error)
	Divide(context.Context, *Args) (*Quotient, error)
}

func RegisterArithServer(s *grpc.Server, srv ArithServer) {
	s.RegisterService(&_Arith_serviceDesc, srv)
}

func _Arith_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Arith/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServer).Multiply(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arith_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Arith/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServer).Divide(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arith_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Arith",
	HandlerType: (*ArithServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _Arith_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Arith_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arith.proto",
}

func init() { proto.RegisterFile("arith.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0xca, 0x2c,
	0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe1, 0x62, 0x71,
	0x2c, 0x4a, 0x2f, 0x16, 0xe2, 0xe4, 0x62, 0x74, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x05, 0x31,
	0x9d, 0x24, 0x98, 0x40, 0x4c, 0x25, 0x21, 0x2e, 0xd6, 0xa0, 0xd4, 0x82, 0x9c, 0x4a, 0x90, 0x58,
	0x10, 0x44, 0x5a, 0x49, 0x85, 0x8b, 0x23, 0xb0, 0x34, 0xbf, 0x24, 0x33, 0x35, 0xaf, 0x44, 0x88,
	0x9b, 0x8b, 0x19, 0xc8, 0x86, 0xea, 0x03, 0x72, 0x82, 0x52, 0x73, 0x21, 0x3a, 0x8d, 0xfc, 0xb8,
	0x58, 0x1d, 0x41, 0x56, 0x09, 0x29, 0x72, 0x71, 0xf8, 0x96, 0xe6, 0x94, 0x64, 0x82, 0x4c, 0xe1,
	0xd0, 0x2b, 0x48, 0xd2, 0x03, 0x59, 0x27, 0xc5, 0x09, 0x62, 0x81, 0x8d, 0x56, 0x62, 0x10, 0x52,
	0xe2, 0x62, 0x73, 0xc9, 0x2c, 0xcb, 0x4c, 0x49, 0x45, 0x52, 0xc0, 0x03, 0x62, 0xc1, 0xec, 0x51,
	0x62, 0x48, 0x62, 0x03, 0x3b, 0xd9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x53, 0xc6, 0x17, 0x6b,
	0xc1, 0x00, 0x00, 0x00,
}
